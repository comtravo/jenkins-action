{"version":3,"file":"index.js","sources":["../webpack://typescript-action/./lib/main.js","../webpack://typescript-action/./node_modules/@actions/core/lib/command.js","../webpack://typescript-action/./node_modules/@actions/core/lib/core.js","../webpack://typescript-action/./node_modules/@actions/core/lib/file-command.js","../webpack://typescript-action/./node_modules/@actions/core/lib/utils.js","../webpack://typescript-action/./node_modules/jenkins/lib/build.js","../webpack://typescript-action/./node_modules/jenkins/lib/crumb_issuer.js","../webpack://typescript-action/./node_modules/jenkins/lib/index.js","../webpack://typescript-action/./node_modules/jenkins/lib/jenkins.js","../webpack://typescript-action/./node_modules/jenkins/lib/job.js","../webpack://typescript-action/./node_modules/jenkins/lib/label.js","../webpack://typescript-action/./node_modules/jenkins/lib/log_stream.js","../webpack://typescript-action/./node_modules/jenkins/lib/middleware.js","../webpack://typescript-action/./node_modules/jenkins/lib/node.js","../webpack://typescript-action/./node_modules/jenkins/lib/queue.js","../webpack://typescript-action/./node_modules/jenkins/lib/utils.js","../webpack://typescript-action/./node_modules/jenkins/lib/view.js","../webpack://typescript-action/./node_modules/papi/lib/client.js","../webpack://typescript-action/./node_modules/papi/lib/codecs.js","../webpack://typescript-action/./node_modules/papi/lib/constants.js","../webpack://typescript-action/./node_modules/papi/lib/errors.js","../webpack://typescript-action/./node_modules/papi/lib/index.js","../webpack://typescript-action/./node_modules/papi/lib/shortcuts.js","../webpack://typescript-action/./node_modules/papi/lib/tools.js","../webpack://typescript-action/./node_modules/papi/lib/utils.js","../webpack://typescript-action/external \"events\"","../webpack://typescript-action/external \"fs\"","../webpack://typescript-action/external \"http\"","../webpack://typescript-action/external \"https\"","../webpack://typescript-action/external \"os\"","../webpack://typescript-action/external \"path\"","../webpack://typescript-action/external \"querystring\"","../webpack://typescript-action/external \"url\"","../webpack://typescript-action/external \"util\"","../webpack://typescript-action/webpack/bootstrap","../webpack://typescript-action/webpack/runtime/compat","../webpack://typescript-action/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = exports.getJenkinsClient = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst jenkins_1 = __importDefault(require(\"jenkins\"));\nfunction getJenkinsClient(baseUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return jenkins_1.default({\n            baseUrl,\n            promisify: true\n        });\n    });\n}\nexports.getJenkinsClient = getJenkinsClient;\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const baseUrl = core.getInput('baseUrl', {\n                required: true\n            });\n            core.info('Fetching Jenkins client');\n            const jenkinsClient = yield getJenkinsClient(baseUrl);\n            const jobUrl = core.getInput('jobUrl', {\n                required: true\n            });\n            const jobParamsString = core.getInput('jobParams');\n            const jobParams = JSON.parse(jobParamsString);\n            const buildParams = {\n                delay: '0sec',\n                parameters: jobParams\n            };\n            const getJobResponse = yield jenkinsClient.job.get(jobUrl);\n            if (getJobResponse.nextBuildNumber === 1) {\n                core.warning(`Triggering Jenkins job: ${jobUrl} without params as it is the first execution`);\n                return jenkinsClient.job.build(jobUrl);\n            }\n            core.info(`Triggering Jenkins job: ${jobUrl} with params: ${JSON.stringify(buildParams)}`);\n            return jenkinsClient.job.build(jobUrl, buildParams);\n        }\n        catch (error) {\n            core.setFailed(error.message);\n        }\n    });\n}\nexports.run = run;\nrun();\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","/**\n * Build client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar LogStream = require('./log_stream').LogStream;\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Build` client.\n */\n\nfunction Build(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nBuild.meta = {};\n\n/**\n * Build details\n */\n\nBuild.prototype.get = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n  var arg3 = typeof arguments[3];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    if (arg2 === 'object') {\n      opts = arguments[2];\n      callback = arg3 === 'function' ? arguments[3] : undefined;\n    } else {\n      opts = {};\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    }\n\n    opts.name = arguments[0];\n    opts.number = arguments[1];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'get'], opts);\n\n  var req = { name: 'build.get' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/api/json';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * Stop build\n */\n\nBuild.prototype.stop = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    opts = {\n      name: arguments[0],\n      number: arguments[1],\n    };\n    callback = arguments[2];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'stop'], opts);\n\n  var req = { name: 'build.stop' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/stop';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    middleware.require302('failed to stop: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Terminate build\n */\n\nBuild.prototype.term = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    opts = {\n      name: arguments[0],\n      number: arguments[1],\n    };\n    callback = arguments[2];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'term'], opts);\n\n  var req = { name: 'build.term' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/term';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n* Get build log\n*/\n\nBuild.prototype.log = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n  var arg3 = typeof arguments[3];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    if (arg2 === 'object') {\n      opts = arguments[2];\n      callback = arg3 === 'function' ? arguments[3] : undefined;\n    } else {\n      opts = {};\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    }\n\n    opts.name = arguments[0];\n    opts.number = arguments[1];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'log'], opts);\n\n  var req = { name: 'build.log' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/logText/progressive{type}';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n      type: opts.type === 'html' ? 'Html' : 'Text',\n    };\n    req.type = 'form';\n    req.body = {};\n    if (opts.hasOwnProperty('start')) req.body.start = opts.start;\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    function(ctx, next) {\n      if (ctx.err) return next(ctx.err);\n      if (!opts.meta) return next(false, null, ctx.res.body);\n\n      var data = {\n        text: ctx.res.body,\n        more: ctx.res.headers['x-more-data'] === 'true',\n      };\n\n      if (ctx.res.headers['x-text-size']) {\n        data.size = ctx.res.headers['x-text-size'];\n      }\n\n      next(false, null, data);\n    },\n    callback\n  );\n};\n\n/**\n* Get log stream\n*/\n\nBuild.meta.logStream = { type: 'eventemitter' };\n\nBuild.prototype.logStream = function(opts) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    if (arg2 === 'object') {\n      opts = arguments[2];\n    } else {\n      opts = {};\n    }\n\n    opts.name = arguments[0];\n    opts.number = arguments[1];\n  } else {\n    opts = opts || {};\n  }\n\n  return new LogStream(this.jenkins, opts);\n};\n\n/**\n * Module exports.\n */\n\nexports.Build = Build;\n","/**\n * CrumbIssuer client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `CrumbIssuer` client.\n */\n\nfunction CrumbIssuer(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nCrumbIssuer.meta = {};\n\n/**\n * Get crumb\n */\n\nCrumbIssuer.prototype.get = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  this.jenkins._log(['debug', 'crumbIssuer', 'get'], opts);\n\n  var req = {\n    name: 'crumbIssuer.get',\n    path: '/crumbIssuer/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(req, middleware.body, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.CrumbIssuer = CrumbIssuer;\n","/**\n * Module index\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Jenkins = require('./jenkins').Jenkins;\n\n/**\n * Module exports.\n */\n\nvar m = function() {\n  return m.Jenkins.apply(this, arguments);\n};\n\nm.Jenkins = Jenkins;\n\nmodule.exports = m;\n","/**\n * Jenkins client (papi)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar papi = require('papi');\nvar util = require('util');\n\nvar Build = require('./build').Build;\nvar CrumbIssuer = require('./crumb_issuer').CrumbIssuer;\nvar Job = require('./job').Job;\nvar Label = require('./label').Label;\nvar Node = require('./node').Node;\nvar Queue = require('./queue').Queue;\nvar View = require('./view').View;\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Jenkins` client.\n */\n\nfunction Jenkins(opts) {\n  if (!(this instanceof Jenkins)) {\n    return new Jenkins(opts);\n  }\n\n  if (typeof opts === 'string') {\n    opts = { baseUrl: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  opts = Object.assign({}, opts);\n\n  if (!opts.baseUrl) {\n    if (opts.url) {\n      opts.baseUrl = opts.url;\n      delete opts.url;\n    } else {\n      throw new Error('baseUrl required');\n    }\n  }\n\n  if (!opts.headers) {\n    opts.headers = {};\n  }\n  if (!opts.headers.referer) {\n    opts.headers.referer = opts.baseUrl + '/';\n  }\n\n  if (opts.request) {\n    throw new Error('request not longer supported');\n  }\n\n  opts.name = 'jenkins';\n\n  if (typeof opts.crumbIssuer === 'function') {\n    this._crumbIssuer = opts.crumbIssuer;\n    delete opts.crumbIssuer;\n  } else if (opts.crumbIssuer === true) {\n    this._crumbIssuer = utils.crumbIssuer;\n  }\n\n  if (opts.formData) {\n    if (typeof opts.formData !== 'function' || opts.formData.name !== 'FormData') {\n      throw new Error('formData is invalid');\n    }\n    this._formData = opts.formData;\n    delete opts.formData;\n  }\n\n  papi.Client.call(this, opts);\n\n  this._ext('onCreate', this._onCreate);\n  this._ext('onResponse', this._onResponse);\n\n  this.build = new Jenkins.Build(this);\n  this.crumbIssuer = new Jenkins.CrumbIssuer(this);\n  this.job = new Jenkins.Job(this);\n  this.label = new Jenkins.Label(this);\n  this.node = new Jenkins.Node(this);\n  this.queue = new Jenkins.Queue(this);\n  this.view = new Jenkins.View(this);\n\n  try {\n    if (opts.promisify) {\n      if (typeof opts.promisify === 'function') {\n        papi.tools.promisify(this, opts.promisify);\n      } else {\n        papi.tools.promisify(this);\n      }\n    }\n  } catch (err) {\n    err.message = 'promisify: ' + err.message;\n    throw err;\n  }\n}\n\nutil.inherits(Jenkins, papi.Client);\n\nJenkins.Build = Build;\nJenkins.CrumbIssuer = CrumbIssuer;\nJenkins.Job = Job;\nJenkins.Label = Label;\nJenkins.Node = Node;\nJenkins.Queue = Queue;\nJenkins.View = View;\n\n/**\n * Object meta\n */\n\nJenkins.meta = {};\n\n/**\n * Inject CSRF Protection crumb into POST requests\n */\n\nJenkins.prototype._onCreate = function(ctx, next) {\n  if (!this._crumbIssuer || ctx.opts.method !== 'POST') return next();\n\n  this._crumbIssuer(this, function(err, data) {\n    if (err) return next(err);\n\n    if (data.headerName && data.headerValue) {\n      if (!ctx.opts.headers) ctx.opts.headers = {};\n      ctx.opts.headers[data.headerName] = data.headerValue;\n    }\n\n    next();\n  });\n};\n\n/**\n * Handle responses.\n */\n\nJenkins.prototype._onResponse = function(ctx, next) {\n  if (ctx.err) {\n    if (ctx.res && ctx.res.headers && ctx.res.headers['x-error']) {\n      ctx.err.message = ctx.res.headers['x-error'].replace(/\\?/g, '\"');\n    }\n    ctx.err.res = ctx.res;\n  }\n\n  next();\n};\n\n/**\n * Jenkins info\n */\n\nJenkins.prototype.info = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  this._log(['debug', 'info'], opts);\n\n  var req = {\n    name: 'info',\n    path: '/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this._get(req, middleware.body, callback);\n};\n\nJenkins.prototype.get = Jenkins.prototype.info;\n\n/**\n * Walk methods\n */\n\nJenkins.meta.walk = { type: 'sync' };\n\nJenkins.walk = Jenkins.prototype.walk = function() {\n  return papi.tools.walk(Jenkins);\n};\n\n/**\n * Module exports.\n */\n\nexports.Jenkins = Jenkins;\n","/**\n * Job client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Job` client.\n */\n\nfunction Job(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nJob.meta = {};\n\n/**\n * Trigger job build\n */\n\nJob.prototype.build = function(opts, callback) {\n  var self = this;\n\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  }\n\n  opts = opts || {};\n\n  self.jenkins._log(['debug', 'job', 'build'], opts);\n\n  var req = { name: 'job.build' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/build';\n    req.params = { folder: folder.path() };\n\n    if (typeof opts.parameters === 'object') {\n      req.path += 'WithParameters';\n\n      var form;\n      var data = {};\n\n      Object.keys(opts.parameters).forEach(function(name) {\n        var value = opts.parameters[name];\n\n        if (utils.isFileLike(value)) {\n          if (!form) {\n            if (!self.jenkins._formData) {\n              throw new Error('formData must be defined when client initalized to use file upload');\n            }\n            form = new self.jenkins._formData();\n          }\n          form.append(name, value, { filename: name });\n        } else {\n          data[name] = value;\n        }\n      });\n\n      if (form) {\n        Object.keys(data).forEach(function(key) {\n          form.append(key, data[key]);\n        });\n        req.body = form;\n\n        if (!req.headers) req.headers = {};\n        var formHeaders = form.getHeaders();\n        Object.keys(formHeaders).forEach(function(name) {\n          req.headers[name] = formHeaders[name];\n        });\n      }\n\n      if (!req.body) {\n        req.type = 'form';\n        req.body = data;\n      }\n    }\n\n    if (opts.delay) req.query.delay = opts.delay;\n    if (opts.token) req.query.token = opts.token;\n  } catch (err) {\n    return callback(self.jenkins._err(err, req));\n  }\n\n  return self.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.ignoreErrorForStatusCodes(302),\n    middleware.queueLocation,\n    callback\n  );\n};\n\n/**\n * Get or update config\n */\n\nJob.prototype.config = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    opts = { name: arguments[0] };\n    if (arg1 === 'string') {\n      opts.xml = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'config'], opts);\n\n  var req = { name: 'job.config' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/config.xml';\n    req.params = { folder: folder.path() };\n\n    if (opts.xml) {\n      req.method = 'POST';\n      req.headers = { 'content-type': 'text/xml; charset=utf-8' };\n      req.body = Buffer.from(opts.xml);\n    } else {\n      req.method = 'GET';\n    }\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._request(\n    req,\n    middleware.notFound('job ' + opts.name),\n    function(ctx, next) {\n      if (ctx.err || opts.xml) return middleware.empty(ctx, next);\n\n      next(false, null, ctx.res.body.toString('utf8'));\n    },\n    callback\n  );\n};\n\n/**\n * Copy job\n */\n\nJob.prototype.copy = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      from: arguments[0],\n      name: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'copy'], opts);\n\n  var req = { name: 'job.copy' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.from) throw new Error('from required');\n\n    req.path = '{dir}/createItem';\n    req.headers = { 'content-type': 'text/xml; charset=utf-8' };\n    req.params = { dir: folder.dir() };\n    req.query.name = folder.name();\n    req.query.from = opts.from;\n    req.query.mode = 'copy';\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to create: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Create new job from xml\n */\n\nJob.prototype.create = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      xml: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'create'], opts);\n\n  var req = { name: 'job.create' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.xml) throw new Error('xml required');\n\n    req.path = '{dir}/createItem';\n    req.headers = { 'content-type': 'text/xml; charset=utf-8' };\n    req.params = { dir: folder.dir() };\n    req.query.name = folder.name();\n    req.body = Buffer.from(opts.xml);\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(req, middleware.empty, callback);\n};\n\n/**\n * Destroy job\n */\n\nJob.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'destroy'], opts);\n\n  var req = { name: 'job.destroy' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/doDelete';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to delete: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\nJob.meta.delete = { type: 'alias' };\n\nJob.prototype.delete = Job.prototype.destroy;\n\n/**\n * Disable job\n */\n\nJob.prototype.disable = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'disable'], opts);\n\n  var req = { name: 'job.disable' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/disable';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to disable: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Enable job\n */\n\nJob.prototype.enable = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'enable'], opts);\n\n  var req = { name: 'job.enable' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/enable';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to enable: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Job exists\n */\n\nJob.prototype.exists = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'exists'], opts);\n\n  var req = { name: 'job.exists' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/api/json';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._head(req, middleware.exists, callback);\n};\n\n/**\n * Job details\n */\n\nJob.prototype.get = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'get'], opts);\n\n  var req = { name: 'job.get' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/api/json';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * List jobs\n */\n\nJob.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'list'], opts);\n\n  var req = {\n    name: 'job.list',\n    path: '/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(\n    req,\n    function(ctx, next) {\n      if (ctx.err) return next();\n\n      if (!ctx.res.body || !Array.isArray(ctx.res.body.jobs)) {\n        ctx.err = new Error('returned bad data');\n      }\n\n      next();\n    },\n    middleware.bodyItem('jobs'),\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.Job = Job;\n","/**\n * Label client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Label` client.\n */\n\nfunction Label(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nLabel.meta = {};\n\n/**\n * Label details\n */\n\nLabel.prototype.get = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'label', 'get'], opts);\n\n  var req = { name: 'label.get' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/label/{name}/api/json';\n    req.params = {\n      name: opts.name,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.Label = Label;\n","/**\n * Log stream.\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar events = require('events');\nvar util = require('util');\n\n/**\n * Initialize a new `LogStream` instance.\n */\n\nfunction LogStream(jenkins, opts) {\n  var self = this;\n\n  events.EventEmitter.call(self);\n\n  self._jenkins = jenkins;\n\n  opts = opts || {};\n\n  self._delay = opts.delay || 1000;\n  delete opts.delay;\n\n  self._opts = {};\n  for (var key in opts) {\n    if (opts.hasOwnProperty(key)) {\n      self._opts[key] = opts[key];\n    }\n  }\n  self._opts.meta = true;\n\n  process.nextTick(function() { self._run(); });\n}\n\nutil.inherits(LogStream, events.EventEmitter);\n\n/**\n * Object meta\n */\n\nLogStream.meta = {};\n\n/**\n * End watch\n */\n\nLogStream.meta.end = { type: 'sync' };\n\nLogStream.prototype.end = function() {\n  clearTimeout(this._timeoutId);\n\n  if (this._end) return;\n  this._end = true;\n\n  this.emit('end');\n};\n\n/**\n * Error helper\n */\n\nLogStream.prototype._err = function(err) {\n  if (this._end) return;\n\n  this.emit('error', err);\n\n  this.end();\n};\n\n/**\n * Run\n */\n\nLogStream.prototype._run = function() {\n  var self = this;\n\n  if (self._end) return;\n\n  try {\n    self._jenkins.build.log(self._opts, function(err, data) {\n      if (self._end) return;\n      if (err) return self._err(err);\n\n      if (typeof data.text === 'string') self.emit('data', data.text);\n\n      if (!data.more) return self.end();\n      if (data.size) self._opts.start = data.size;\n\n      self._timeoutId = setTimeout(function() { self._run(); }, self._delay);\n    });\n  } catch (err) {\n    self._err(err);\n  }\n};\n\n/**\n * Module exports.\n */\n\nexports.LogStream = LogStream;\n","/**\n * Format Papi responses\n */\n\n'use strict';\n\n/**\n * Body\n */\n\nfunction body(ctx, next) {\n  if (ctx.err) return next(ctx.err);\n\n  next(false, null, ctx.res.body);\n}\n\n/**\n * Body item\n */\n\nfunction bodyItem(key) {\n  return function(ctx, next) {\n    if (ctx.err) return next(ctx.err);\n\n    next(false, null, ctx.res.body[key]);\n  };\n}\n\n/**\n * Empty\n */\n\nfunction empty(ctx, next) {\n  if (ctx.err) return next(ctx.err);\n\n  next(false);\n}\n\n/**\n * Exists\n */\n\nfunction exists(ctx, next) {\n  if (ctx.res && ctx.res.statusCode === 404) {\n    return next(false, null, false);\n  }\n\n  if (ctx.err) return next(ctx.err);\n\n  next(false, null, true);\n}\n\n/**\n * Ignore errors for provided status codes\n */\n\nfunction ignoreErrorForStatusCodes() {\n  var statusCodes = Array.prototype.slice.call(arguments);\n\n  return function(ctx, next) {\n    if (ctx.err && ctx.res && statusCodes.indexOf(ctx.res.statusCode) !== -1) {\n      delete ctx.err;\n    }\n\n    next();\n  };\n}\n\n/**\n * Require 302 or error\n */\n\nfunction require302(message) {\n  return function(ctx, next) {\n    if (ctx.res && ctx.res.statusCode === 302) {\n      return next(false);\n    } else if (ctx.res) {\n      if (ctx.err) {\n        if (!ctx.res.headers['x-error']) ctx.err.message = message;\n      } else {\n        ctx.err = new Error(message);\n      }\n\n      return next(ctx.err);\n    }\n\n    next();\n  };\n}\n\n/**\n * Not found\n */\n\nfunction notFound(value) {\n  return function(ctx, next) {\n    if (ctx.res && ctx.res.statusCode === 404) {\n      var err = new Error(value + ' not found');\n      err.notFound = true;\n\n      return next(err);\n    }\n\n    next();\n  };\n}\n\n/**\n * Queue location\n */\n\nfunction queueLocation(ctx, next) {\n  if (ctx.err) return next(ctx.err);\n\n  try {\n    // Get queue number from location header\n    var parts = ctx.res.headers.location.split('/');\n\n    return next(false, null, parseInt(parts[parts.length - 2], 10));\n  } catch (err) {\n    // ignore errors\n  }\n\n  next();\n}\n\n/**\n * Module exports\n */\n\nexports.body = body;\nexports.bodyItem = bodyItem;\nexports.empty = empty;\nexports.exists = exists;\nexports.ignoreErrorForStatusCodes = ignoreErrorForStatusCodes;\nexports.notFound = notFound;\nexports.queueLocation = queueLocation;\nexports.require302 = require302;\n","/**\n * Node client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Node` client.\n */\n\nfunction Node(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nNode.meta = {};\n\n/**\n * Get or update config\n */\n\nNode.prototype.config = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    opts = { name: arguments[0] };\n    if (arg1 === 'string') {\n      opts.xml = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'node', 'config'], opts);\n\n  var req = { name: 'node.config' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/config.xml';\n    req.params = {\n      name: opts.name === 'master' ? '(master)' : opts.name,\n    };\n\n    if (opts.xml) {\n      if (opts.name === 'master') {\n        throw new Error('master not supported');\n      }\n\n      req.method = 'POST';\n      req.headers = { 'content-type': 'text/xml; charset=utf-8' };\n      req.body = Buffer.from(opts.xml);\n    } else {\n      req.method = 'GET';\n    }\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._request(\n    req,\n    middleware.notFound('node ' + opts.name),\n    function(ctx, next) {\n      if (ctx.err || opts.xml) return middleware.empty(ctx, next);\n\n      next(false, null, ctx.res.body.toString('utf8'));\n    },\n    callback\n  );\n};\n\n/**\n * Create node\n */\n\nNode.prototype.create = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  } else {\n    opts = opts || {};\n  }\n\n  opts.type = opts.type || 'hudson.slaves.DumbSlave$DescriptorImpl';\n  opts.retentionStrategy = opts.retentionStrategy ||\n    { 'stapler-class': 'hudson.slaves.RetentionStrategy$Always' };\n  opts.nodeProperties = opts.nodeProperties || { 'stapler-class-bag': 'true' };\n  opts.launcher = opts.launcher ||\n    { 'stapler-class': 'hudson.slaves.JNLPLauncher' };\n  opts.numExecutors = opts.hasOwnProperty('numExecutors') ?\n    opts.numExecutors : 2;\n  opts.remoteFS = opts.remoteFS || '/var/lib/jenkins';\n  opts.mode = opts.mode || (opts.exclusive ? 'EXCLUSIVE' : 'NORMAL');\n\n  this.jenkins._log(['debug', 'node', 'create'], opts);\n\n  var req = { name: 'node.create' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/doCreateItem';\n    req.query.name = opts.name;\n    req.query.type = opts.type;\n    req.query.json = JSON.stringify({\n      name: opts.name,\n      nodeDescription: opts.nodeDescription,\n      numExecutors: opts.numExecutors,\n      remoteFS: opts.remoteFS,\n      labelString: opts.labelString,\n      mode: opts.mode,\n      type: opts.type,\n      retentionStrategy: opts.retentionStrategy,\n      nodeProperties: opts.nodeProperties,\n      launcher: opts.launcher,\n    });\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to create: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Destroy node\n */\n\nNode.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'node', 'destroy'], opts);\n\n  var req = { name: 'node.destroy' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/doDelete';\n    req.params = { name: opts.name };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to delete: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\nNode.meta.delete = { type: 'alias' };\n\nNode.prototype.delete = Node.prototype.destroy;\n\n/**\n * Disconnect node call\n */\n\nNode.prototype.doDisconnect = function(opts, callback) {\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'node', 'doDisconnect'], opts);\n\n  var req = { name: 'node.doDisconnect' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/doDisconnect';\n    req.params = { name: opts.name };\n    req.query.offlineMessage = opts.message || '';\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n      req,\n      middleware.notFound(opts.name),\n      middleware.require302('failed to disconnect: ' + opts.name),\n      middleware.empty,\n      callback\n  );\n};\n\n/**\n * Toggle offline\n */\n\nNode.prototype.toggleOffline = function(opts, callback) {\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'node', 'toggleOffline'], opts);\n\n  var req = { name: 'node.toggleOffline' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/toggleOffline';\n    req.params = { name: opts.name };\n    req.query.offlineMessage = opts.message || '';\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to toggle offline: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Change offline message\n */\n\nNode.prototype.changeOfflineCause = function(opts, callback) {\n  opts = opts || {};\n\n  opts.message = opts.message || '';\n\n  this.jenkins._log(['debug', 'node', 'changeOfflineCause'], opts);\n\n  var req = { name: 'node.changeOfflineCause' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/changeOfflineCause';\n    req.params = { name: opts.name };\n    req.type = 'form';\n    req.body = {\n      offlineMessage: opts.message,\n      json: JSON.stringify({\n        offlineMessage: opts.message,\n      }),\n      Submit: 'Update reason',\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to update offline message: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Disconnect node\n */\n\nNode.prototype.disconnect = function(opts, callback) {\n  var self = this;\n\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      message: arguments[1],\n    };\n    callback = arguments[2];\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  self.jenkins._log(['debug', 'node', 'disconnect'], opts);\n\n  if (!opts.name) {\n    return callback(this.jenkins._err('name required', { name: 'node.disconnect' }));\n  }\n\n  self.get(opts.name, function(err, node) {\n    if (err) return callback(err);\n\n    if (node && node.offline) {\n      return self.toggleOffline({ name: opts.name, message: opts.message }, function(err) {\n        if (err) return callback(err);\n\n        callback();\n      });\n    }\n\n    self.doDisconnect({ name: opts.name, message: opts.message }, function(err) {\n      if (err) return callback(err);\n\n      callback();\n    });\n  });\n};\n\n/**\n * Disable node\n */\n\nNode.prototype.disable = function(opts, callback) {\n  var self = this;\n\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      message: arguments[1],\n    };\n    callback = arguments[2];\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  self.jenkins._log(['debug', 'node', 'disable'], opts);\n\n  if (!opts.name) {\n    return callback(this.jenkins._err('name required', { name: 'node.disable' }));\n  }\n\n  self.get(opts.name, function(err, node) {\n    if (err) return callback(err);\n\n    if (node && node.temporarilyOffline) {\n      if (node.offlineCauseReason !== opts.message) {\n        return self.changeOfflineCause({\n          name: opts.name,\n          message: opts.message,\n        }, callback);\n      }\n\n      return callback();\n    }\n\n    self.toggleOffline({ name: opts.name, message: opts.message }, function(err) {\n      if (err) return callback(err);\n\n      callback();\n    });\n  });\n};\n\n/**\n * Enable node\n */\n\nNode.prototype.enable = function(opts, callback) {\n  var self = this;\n\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  self.jenkins._log(['debug', 'node', 'enable'], opts);\n\n  if (!opts.name) {\n    return callback(this.jenkins._err('name required', { name: 'node.enable' }));\n  }\n\n  self.get(opts.name, function(err, node) {\n    if (err) return callback(err);\n\n    if (!node.temporarilyOffline) return callback();\n\n    self.toggleOffline({ name: opts.name, message: '' }, function(err) {\n      if (err) callback(err);\n\n      callback();\n    });\n  });\n};\n\n/**\n * Node exists\n */\n\nNode.prototype.exists = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'exists'], opts);\n\n  var req = { name: 'node.exists' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/api/json';\n    req.params = {\n      name: opts.name === 'master' ? '(master)' : opts.name,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._head(req, middleware.exists, callback);\n};\n\n/**\n * Node details\n */\n\nNode.prototype.get = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'node', 'get'], opts);\n\n  var req = { name: 'node.get' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/api/json';\n    req.params = {\n      name: opts.name === 'master' ? '(master)' : opts.name,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * List nodes\n */\n\nNode.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'node', 'list'], opts);\n\n  var req = {\n    name: 'node.list',\n    path: '/computer/api/json',\n  };\n\n  utils.options(req, opts);\n\n  if (opts.full === true) {\n    return this.jenkins._get(\n      req,\n      middleware.body,\n      callback\n    );\n  } else {\n    return this.jenkins._get(\n      req,\n      middleware.bodyItem('computer'),\n      callback\n    );\n  }\n};\n\n/**\n * Module exports.\n */\n\nexports.Node = Node;\n","/**\n * Queue client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Queue` client.\n */\n\nfunction Queue(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * List queues\n */\n\nQueue.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'queue', 'list'], opts);\n\n  var req = {\n    name: 'queue.list',\n    path: '/queue/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(req, middleware.bodyItem('items'), callback);\n};\n\n/**\n * Get an individual queue item\n */\n\nQueue.prototype.item = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n\n  if (arg0 === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    if (arg0 === 'string' || arg0 === 'number') {\n      opts = {\n        number: opts\n      };\n    }\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'queue', 'item'], opts);\n\n  var req = {\n    name: 'queue.item',\n    path: '/queue/item/{number}/api/json',\n    params: {\n      number: opts.number\n    }\n  };\n\n  utils.options(req, opts);\n\n  if (!opts.number) {\n    return callback(this.jenkins._err(new Error('number required'), req));\n  }\n\n  return this.jenkins._get(req, middleware.body, callback);\n};\n\n/**\n * Deprecated\n */\n\nQueue.prototype.get = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.list(opts, function(err, data) {\n    if (err) return callback(err);\n\n    callback(err, { items: data });\n  });\n};\n\n/**\n * Cancel queue item\n */\n\nQueue.prototype.cancel = function(opts, callback) {\n  if (typeof opts !== 'object') {\n    opts = { number: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'queue', 'cancel'], opts);\n\n  var req = { name: 'queue.cancel' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '/queue/item/{number}/cancelQueue';\n    req.params = { number: opts.number };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to cancel: ' + opts.number),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.Queue = Queue;\n","/**\n * Helper functions\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar urlParse = require('url').parse;\n\n/**\n * Common options\n */\n\nfunction options(req, opts) {\n  if (!req.query) req.query = {};\n\n  if (typeof opts.depth === 'number') {\n    req.query.depth = opts.depth;\n  }\n\n  if (typeof opts.tree === 'string') {\n    req.query.tree = opts.tree;\n  }\n\n  return opts;\n}\n\n/**\n * Raw path param\n */\n\nfunction RawParam(value) {\n  this.encode = false;\n  this.value = value || '';\n}\n\nRawParam.prototype.toString = function() {\n  return this.value;\n};\n\n/**\n * Parse job name from URL\n */\n\nfunction parseName(value) {\n  var jobParts = [];\n\n  var pathParts = (urlParse(value).pathname || '').split('/').filter(Boolean);\n  var state = 0;\n  var part;\n\n  // iterate until we find our first job, then collect the continuous job parts\n  //   ['foo', 'job', 'a', 'job', 'b', 'bar', 'job', 'c'] => ['a', 'b']\n  loop:\n  for (var i = 0; i < pathParts.length; i++) {\n    part = pathParts[i];\n\n    switch (state) {\n      case 0:\n        if (part === 'job') state = 2;\n        break;\n      case 1:\n        if (part !== 'job') break loop;\n        state = 2;\n        break;\n      case 2:\n        jobParts.push(part);\n        state = 1;\n        break;\n    }\n  }\n\n  return jobParts.map(decodeURIComponent);\n}\n\n/**\n * Path for folder plugin\n */\n\nfunction FolderPath(value) {\n  if (!(this instanceof FolderPath)) {\n    return new FolderPath(value);\n  }\n  if (Array.isArray(value)) {\n    this.value = value;\n  } else if (typeof value === 'string') {\n    if (value.match('^https?:\\/\\/')) {\n      this.value = parseName(value);\n    } else {\n      this.value = value.split('/').filter(Boolean);\n    }\n  } else {\n    this.value = [];\n  }\n}\n\nFolderPath.SEP = '/job/';\n\nFolderPath.prototype.isEmpty = function() {\n  return !this.value.length;\n};\n\nFolderPath.prototype.name = function() {\n  return this.value[this.value.length - 1] || '';\n};\n\nFolderPath.prototype.path = function() {\n  if (this.isEmpty()) return new RawParam();\n  return new RawParam(FolderPath.SEP + this.value.map(encodeURIComponent).join(FolderPath.SEP));\n};\n\nFolderPath.prototype.parent = function() {\n  return new FolderPath(this.value.slice(0, Math.max(0, this.value.length - 1)));\n};\n\nFolderPath.prototype.dir = function() {\n  return this.parent().path();\n};\n\n/**\n * Default crumb issuser\n */\n\nfunction crumbIssuer(jenkins, callback) {\n  jenkins.crumbIssuer.get(function(err, data) {\n    if (err) return callback(err);\n    if (!data || !data.crumbRequestField || !data.crumb) {\n      return callback(new Error('Failed to get crumb'));\n    }\n\n    callback(null, {\n      headerName: data.crumbRequestField,\n      headerValue: data.crumb,\n    });\n  });\n}\n\n/**\n * Check if object is file like\n */\n\nfunction isFileLike(v) {\n  return Buffer.isBuffer(v) ||\n    typeof v === 'object' &&\n    typeof v.pipe === 'function' &&\n    v.readable !== false;\n}\n\n/**\n * Module exports\n */\n\nexports.options = options;\nexports.FolderPath = FolderPath;\nexports.crumbIssuer = crumbIssuer;\nexports.isFileLike = isFileLike;\n","/**\n * View client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `View` client.\n */\n\nfunction View(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nView.meta = {};\n\n/**\n * Create new view\n */\n\nView.prototype.create = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      type: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  } else if (arg0 === 'string') {\n    opts = {\n      name: arguments[0],\n      type: 'list',\n    };\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'create'], opts);\n\n  var req = { name: 'view.create' };\n\n  utils.options(req, opts);\n\n  var shortcuts = {\n    list: 'hudson.model.ListView',\n    my: 'hudson.model.MyView',\n  };\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n    var mode = shortcuts[opts.type] || opts.type;\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.type) throw new Error('type required');\n\n    req.path = '{dir}/createView';\n    req.type = 'form';\n    req.params = { dir: folder.dir() };\n    req.body = {\n      name: folder.name(),\n      mode: mode,\n      json: JSON.stringify({\n        name: folder.name(),\n        mode: mode,\n      }),\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to create: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Config list view\n */\n\nView.prototype.config = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    opts = { name: arguments[0] };\n    if (arg1 === 'string') {\n      opts.xml = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'config'], opts);\n\n  var req = {\n    path: '{dir}/view/{name}/config.xml',\n    name: 'view.config',\n  };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.params = { dir: folder.dir(), name: folder.name() };\n\n    if (opts.xml) {\n      req.method = 'POST';\n      req.headers = { 'content-type': 'text/xml; charset=utf-8' };\n      req.body = Buffer.from(opts.xml);\n    } else {\n      req.method = 'GET';\n    }\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._request(\n    req,\n    middleware.notFound('view ' + opts.name),\n    function(ctx, next) {\n      if (ctx.err || opts.xml) return middleware.empty(ctx, next);\n\n      next(false, null, ctx.res.body.toString('utf8'));\n    },\n    callback\n  );\n};\n\n/**\n * Destroy view\n */\n\nView.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'destroy'], opts);\n\n  var req = { name: 'view.destroy' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{dir}/view/{name}/doDelete';\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to delete: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\nView.meta.delete = { type: 'alias' };\n\nView.prototype.delete = View.prototype.destroy;\n\n/**\n * View exists\n */\n\nView.prototype.exists = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'exists'], opts);\n\n  var req = { name: 'view.exists' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{dir}/view/{name}/api/json';\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._head(req, middleware.exists, callback);\n};\n\n/**\n * View details\n */\n\nView.prototype.get = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'get'], opts);\n\n  var req = { name: 'view.get' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{dir}/view/{name}/api/json';\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * List views\n */\n\nView.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'list'], opts);\n\n  var req = {\n    name: 'view.list',\n    path: '{folder}/api/json',\n  };\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(\n    req,\n    function(ctx, next) {\n      if (ctx.err) return next();\n\n      if (!ctx.res.body || !Array.isArray(ctx.res.body.views)) {\n        ctx.err = new Error('returned bad data');\n      }\n\n      next();\n    },\n    middleware.bodyItem('views'),\n    callback\n  );\n};\n\n/**\n * Add job\n */\n\nView.prototype.add = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      job: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'add'], opts);\n\n  var req = {\n    path: '{dir}/view/{name}/addJobToView',\n    query: { name: opts.job },\n    type: 'form',\n    name: 'view.add',\n    body: {},\n  };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.job) throw new Error('job required');\n\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Remove job\n */\n\nView.prototype.remove = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      job: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'remove'], opts);\n\n  var req = {\n    path: '{dir}/view/{name}/removeJobFromView',\n    query: { name: opts.job },\n    type: 'form',\n    name: 'view.remove',\n    body: {},\n  };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.job) throw new Error('job required');\n\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.View = View;\n","/**\n * HTTP client.\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar events = require('events');\nvar http = require('http');\nvar https = require('https');\nvar url = require('url');\nvar util = require('util');\n\nvar constants = require('./constants');\nvar errors = require('./errors');\nvar meta = require('../package.json');\nvar utils = require('./utils');\n\n/**\n * Client\n */\n\nfunction Client(opts) {\n  if (!(this instanceof Client)) {\n    return new Client(opts);\n  }\n\n  events.EventEmitter.call(this);\n\n  opts = opts || {};\n\n  if (typeof opts === 'string') {\n    opts = { baseUrl: opts };\n  } else {\n    opts = utils.merge(opts);\n  }\n\n  if (!opts.baseUrl) {\n    throw errors.Validation('baseUrl required');\n  }\n\n  if (!(opts.baseUrl instanceof url.Url)) {\n    if (typeof opts.baseUrl !== 'string') {\n      throw errors.Validation('baseUrl must be a string: ' + opts.baseUrl);\n    }\n\n    opts.baseUrl = url.parse(opts.baseUrl);\n  }\n\n  var path = opts.baseUrl.pathname;\n  opts.baseUrl = utils.pick(opts.baseUrl,\n    'auth', 'hostname', 'port', 'protocol');\n  opts.baseUrl.path = path;\n\n  if (opts.baseUrl.path === '/') {\n    opts.baseUrl.path = '';\n  } else if (opts.baseUrl.path[opts.baseUrl.path.length - 1] === '/') {\n    throw errors.Validation('baseUrl must not end with a forward slash');\n  }\n\n  opts.headers = utils.mergeHeaders(opts.headers);\n  if (opts.tags) {\n    if (Array.isArray(opts.tags)) {\n      opts.tags = opts.tags.slice(0);\n    } else {\n      throw errors.Validation('tags must be an array');\n    }\n  } else {\n    opts.tags = [];\n  }\n\n  if (opts.name && !~opts.tags.indexOf(opts.name)) {\n    opts.tags.push(opts.name);\n  }\n\n  opts.encoders = utils.merge(constants.ENCODERS, opts.encoders);\n  opts.decoders = utils.merge(constants.DECODERS, opts.decoders);\n\n  this._opts = opts;\n  this._exts = {};\n}\n\nutil.inherits(Client, events.EventEmitter);\n\n/**\n * Add information to error\n */\n\nClient.prototype._err = function(err, opts) {\n  if (!err) return err;\n\n  if (!(err instanceof Error)) err = new Error(err);\n\n  if (opts && opts.name) {\n    err.message = util.format('%s: %s', opts.name, err.message);\n  }\n\n  if (this._opts.name) {\n    err.message = util.format('%s: %s', this._opts.name, err.message);\n  }\n\n  return err;\n};\n\n/**\n * Register an extension\n */\n\nClient.prototype._ext = function(eventName, callback) {\n  if (!eventName || typeof eventName !== 'string') {\n    throw this._err(errors.Validation('extension eventName required'));\n  }\n\n  if (typeof callback !== 'function') {\n    throw this._err(errors.Validation('extension callback required'));\n  }\n\n  if (!this._exts[eventName]) this._exts[eventName] = [];\n\n  this._exts[eventName].push(callback);\n};\n\n/**\n * Register a plugin\n */\n\nClient.prototype._plugin = function(plugin, options) {\n  if (!plugin) {\n    throw this._err(errors.Validation('plugin required'));\n  }\n\n  if (typeof plugin.register !== 'function') {\n    throw this._err(errors.Validation('plugin must have register function'));\n  }\n\n  var attributes = plugin.register.attributes;\n\n  if (!attributes) {\n    throw this._err(errors.Validation('plugin attributes required'));\n  }\n\n  if (!attributes.name) {\n    throw this._err(errors.Validation('plugin attributes name required'));\n  }\n\n  if (!attributes.version) {\n    throw this._err(errors.Validation('plugin attributes version required'));\n  }\n\n  return plugin.register(this, options || {});\n};\n\n/**\n * Log request events\n */\n\nClient.prototype._log = function(tags, data) {\n  return this.emit('log', tags, data);\n};\n\n/**\n * Encode\n */\n\nClient.prototype._encode = function(mime, value) {\n  if (!this._opts.encoders[mime]) {\n    throw errors.Codec('unknown encoder: ' + mime);\n  }\n\n  try {\n    return this._opts.encoders[mime](value);\n  } catch (err) {\n    err.message = 'encode (' + mime + ') failed: ' + err.message;\n    throw errors.Codec(err);\n  }\n};\n\n/**\n * Decode\n */\n\nClient.prototype._decode = function(mime, value) {\n  if (!this._opts.decoders[mime]) {\n    throw errors.Codec('unknown decoder: ' + mime);\n  }\n\n  try {\n    return this._opts.decoders[mime](value);\n  } catch (err) {\n    err.message = 'decode (' + mime + ') failed: ' + err.message;\n    throw errors.Codec(err);\n  }\n};\n\n/**\n * Push ext list\n */\n\nClient.prototype.__push = function(request, name) {\n  if (this._exts[name]) {\n    request._stack.push.apply(request._stack, this._exts[name]);\n  }\n\n  if (request.opts && request.opts.exts && request.opts.exts[name]) {\n    if (Array.isArray(request.opts.exts[name])) {\n      request._stack.push.apply(request._stack, request.opts.exts[name]);\n    } else {\n      request._stack.push(request.opts.exts[name]);\n    }\n  }\n};\n\n/**\n * Run request pipeline\n */\n\nClient.prototype._request = function(opts) {\n  var self = this;\n\n  var request;\n\n  if (this.__request) {\n    request = this.__request;\n    opts = request.opts;\n    self = request._client;\n  } else {\n    request = {\n      _args: Array.prototype.slice.call(arguments),\n      _client: this,\n      opts: opts,\n      state: {},\n    };\n\n    if (!opts) opts = request.opts = {};\n\n    if (request._args.length > 1) {\n      request._callback = request._args[request._args.length - 1];\n    } else {\n      return self.emit('error', self._err(\n        errors.Validation('callback required'), opts));\n    }\n\n    // if ctx is an event emitter we use it to abort requests when done is\n    // emitted\n    if (opts.ctx instanceof events.EventEmitter) {\n      request.ctx = opts.ctx;\n    }\n\n    // combine global and request tags\n    opts.tags = (opts.tags || []).concat(self._opts.tags);\n\n    // inject request name into tags if not already defined\n    if (opts.name && !~opts.tags.indexOf(opts.name)) {\n      opts.tags.push(opts.name);\n    }\n\n    if (!opts.headers) opts.headers = {};\n    if (!opts.params) opts.params = {};\n    if (!opts.query) opts.query = {};\n\n    // restart request\n    request.retry = function() {\n      if (request._retryable === false) {\n        throw errors.Validation('request is not retryable');\n      }\n\n      self._log(['papi', 'request', 'retry'].concat(request.opts.tags));\n\n      delete request.body;\n      delete request.err;\n      delete request.req;\n      delete request.res;\n      delete request.transport;\n\n      self._request.call({ __request: request });\n    };\n\n    request._stack = [];\n\n    self.__push(request, 'onCreate');\n\n    request._stack.push(self.__create);\n\n    self.__push(request, 'onRequest');\n\n    request._stack.push(self.__execute);\n\n    self.__push(request, 'onResponse');\n\n    request._stack.push.apply(\n      request._stack,\n      request._args.slice(1, request._args.length - 1)\n    );\n  }\n\n  var i = 0;\n  function next(err) {\n    if (err) return request._callback(self._err(err, opts));\n\n    // middlware can call next(false, args...) to stop middleware\n    if (err === false) {\n      return request._callback.apply(null,\n        Array.prototype.slice.call(arguments, 1));\n    }\n\n    var fn = request._stack[i++];\n    if (fn) {\n      fn.call(self, request, next);\n    } else {\n      request._callback.call(self, self._err(request.err, opts), request.res);\n    }\n  }\n\n  next();\n};\n\n/**\n * Create HTTP request\n */\n\nClient.prototype.__create = function(request, next) {\n  var self = this;\n\n  var opts = request.opts;\n  var path = opts.path;\n\n  if (typeof path !== 'string') {\n    return next(errors.Validation('path required'));\n  }\n\n  var headers = utils.mergeHeaders(self._opts.headers, opts.headers);\n\n  // path\n  try {\n    path = path.replace(/\\{(\\w+)\\}/g, function(src, dst) {\n      if (!opts.params.hasOwnProperty(dst)) {\n        throw errors.Validation('missing param: ' + dst);\n      }\n\n      var part = opts.params[dst] || '';\n\n      // optionally disable param encoding\n      return part.encode === false && part.toString ?\n        part.toString() : encodeURIComponent(part);\n    });\n  } catch (err) {\n    return next(err);\n  }\n\n  // query\n  if (!utils.isEmpty(opts.query)) {\n    try {\n      path += '?' + self._encode('application/x-www-form-urlencoded',\n                                 opts.query).toString();\n    } catch (err) {\n      return next(err);\n    }\n  }\n\n  // body\n  if (opts.body !== undefined) {\n    var mime = constants.MIME_ALIAS[opts.type] ||\n      headers['content-type'] ||\n      constants.MIME_ALIAS[self._opts.type];\n\n    var isFunction = typeof opts.body === 'function';\n\n    if (isFunction) {\n      try {\n        request.body = opts.body();\n      } catch (err) {\n        return next(err);\n      }\n    } else {\n      request.body = opts.body;\n    }\n\n    var isBuffer = Buffer.isBuffer(request.body);\n    var isStream = utils.isReadableStream(request.body);\n\n    if (!isBuffer && !isStream && !mime) {\n      return next(errors.Validation('type required'));\n    }\n\n    if (!isBuffer && !isStream) {\n      if (self._opts.encoders[mime]) {\n        try {\n          request.body = this._encode(mime, request.body);\n        } catch (err) {\n          return next(err);\n        }\n      } else {\n        return next(errors.Codec('type is unknown: ' + mime));\n      }\n    }\n\n    if (!headers['content-type'] && mime) {\n      headers['content-type'] = mime + '; charset=' + constants.CHARSET;\n    }\n\n    if (isStream) {\n      if (!isFunction) request._retryable = false;\n    } else {\n      headers['content-length'] = request.body.length;\n    }\n  } else if (!~constants.EXCLUDE_CONTENT_LENGTH.indexOf(opts.method)) {\n    headers['content-length'] = 0;\n  }\n\n  // response pipe\n  if (opts.pipe) {\n    var isPipeFunction = typeof opts.pipe === 'function';\n\n    if (isPipeFunction) {\n      try {\n        request.pipe = opts.pipe();\n      } catch (err) {\n        return next(err);\n      }\n    } else {\n      request.pipe = opts.pipe;\n\n      request._retryable = false;\n    }\n\n    if (!utils.isWritableStream(request.pipe)) {\n      return next(errors.Validation('pipe must be a writable stream'));\n    }\n  }\n\n  // build http.request options\n  request.req = utils.merge(\n    utils.pick(self._opts, constants.CLIENT_OPTIONS),\n    utils.pick(self._opts.baseUrl, 'auth', 'hostname', 'port', 'path'),\n    utils.pick(opts, constants.REQUEST_OPTIONS),\n    { headers: headers }\n  );\n\n  // append request path to baseUrl\n  request.req.path += path;\n\n  // pick http transport\n  if (self._opts.baseUrl.protocol === 'https:') {\n    request.transport = https;\n    if (!request.req.port) request.req.port = 443;\n  } else {\n    request.transport = http;\n    if (!request.req.port) request.req.port = 80;\n  }\n\n  if (request.req.auth === null) delete request.req.auth;\n\n  next();\n};\n\n/**\n * Execute HTTP request\n */\n\nClient.prototype.__execute = function(request, next) {\n  var self = this;\n\n  if (request.ctx) {\n    if (request.ctx.canceled === true) {\n      return next(errors.Validation('ctx already canceled'));\n    } else if (request.ctx.finished === true) {\n      return next(errors.Validation('ctx already finished'));\n    }\n  }\n\n  var done = false;\n\n  var opts = request.opts;\n\n  var abort;\n  var timeoutId;\n  var timeout = opts.hasOwnProperty('timeout') ?\n    opts.timeout : self._opts.timeout;\n\n  self._log(['papi', 'request'].concat(opts.tags), request.req);\n\n  var req = request.transport.request(request.req);\n\n  var userAgent = req.getHeader('user-agent');\n\n  if (userAgent === undefined) {\n    req.setHeader('user-agent', 'papi/' + meta.version);\n  } else if (userAgent === null) {\n    req.removeHeader('user-agent');\n  }\n\n  req.on('error', function(err) {\n    self._log(['papi', 'request', 'error'].concat(opts.tags), err);\n\n    if (done) return;\n    done = true;\n\n    if (abort) request.ctx.removeListener('cancel', abort);\n    if (timeoutId) clearTimeout(timeoutId);\n\n    request.err = err;\n    next();\n  });\n\n  if (request.ctx) {\n    abort = function() {\n      req.abort();\n      req.emit('error', errors.Abort('request aborted'));\n    };\n\n    request.ctx.once('cancel', abort);\n  }\n\n  // set request and absolute timeout\n  if (timeout && timeout > 0) {\n    timeoutId = setTimeout(function() {\n      req.emit('timeout');\n      req.abort();\n    }, timeout);\n\n    req.setTimeout(timeout);\n  }\n\n  req.on('timeout', function(err) {\n    self._log(['papi', 'request', 'error', 'timeout'].concat(opts.tags));\n    if (err) {\n      err = errors.Timeout(err);\n    } else {\n      err = errors.Timeout('request timed out (' + timeout + 'ms)');\n    }\n    req.emit('error', err);\n  });\n\n  req.on('response', function(res) {\n    var chunks = [];\n    var bodyLength = 0;\n\n    self._log(['papi', 'response'].concat(opts.tags), {\n      method: opts.method,\n      path: req.path,\n      statusCode: res.statusCode,\n      headers: res.headers,\n      remoteAddress: res.connection && res.connection.remoteAddress,\n      remotePort: res.connection && res.connection.remotePort,\n    });\n\n    request.res = res;\n\n    if (request.pipe) {\n      res.pipe(request.pipe);\n    } else {\n      res.on('data', function(chunk) {\n        chunks.push(chunk);\n        bodyLength += chunk.length;\n      });\n    }\n\n    res.on('end', function() {\n      if (done) return;\n      done = true;\n\n      if (abort) request.ctx.removeListener('cancel', abort);\n      if (timeoutId) clearTimeout(timeoutId);\n\n      // body content mime\n      var mime;\n\n      // decode body\n      if (bodyLength) {\n        res.body = Buffer.concat(chunks, bodyLength);\n\n        // don't decode if user explicitly asks for buffer\n        if (!opts.buffer) {\n          mime = (res.headers['content-type'] || '').split(';')[0].trim();\n\n          if (self._opts.decoders[mime]) {\n            try {\n              res.body = self._decode(mime, res.body);\n            } catch (err) {\n              request.err = err;\n              return next();\n            }\n          }\n        }\n      }\n\n      // any non-200 is consider an error\n      if (Math.floor(res.statusCode / 100) !== 2) {\n        var err = errors.Response();\n\n        if (res.body && mime === 'text/plain' && res.body.length < 80) {\n          err.message = res.body;\n        }\n\n        if (!err.message) {\n          if (http.STATUS_CODES[res.statusCode]) {\n            err.message = http.STATUS_CODES[res.statusCode].toLowerCase();\n          } else {\n            err.message = 'request failed: ' + res.statusCode;\n          }\n        }\n\n        err.statusCode = res.statusCode;\n\n        request.err = err;\n      }\n\n      next();\n    });\n  });\n\n  if (utils.isReadableStream(request.body)) {\n    request.body.pipe(req);\n  } else {\n    req.end(request.body);\n  }\n};\n\n/**\n * Shortcuts\n */\n\nconstants.METHODS.forEach(function(method) {\n  var reqMethod = method.toUpperCase();\n\n  Client.prototype['_' + method] = function(opts) {\n    var args;\n\n    if (typeof opts === 'string') {\n      opts = { path: opts, method: reqMethod };\n\n      args = Array.prototype.slice.call(arguments);\n      args[0] = opts;\n\n      return this._request.apply(this, args);\n    } else if (!opts) {\n      args = Array.prototype.slice.call(arguments);\n      args[0] = {};\n\n      return this._request.apply(this, args);\n    }\n\n    opts.method = reqMethod;\n\n    return this._request.apply(this, arguments);\n  };\n});\n\n/**\n * Module exports.\n */\n\nexports.Client = Client;\n","/**\n * Encoders/Decoders\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar querystring = require('querystring');\n\n/**\n * Text\n */\n\nvar text = {};\n\ntext.encode = function(data) {\n  return Buffer.from(data, 'utf8');\n};\n\ntext.decode = function(data) {\n  return Buffer.isBuffer(data) ? data.toString() : data;\n};\n\n/**\n * JSON\n */\n\nvar json = {};\n\njson.encode = function(data) {\n  return text.encode(JSON.stringify(data));\n};\n\njson.decode = function(data) {\n  return JSON.parse(text.decode(data));\n};\n\n/**\n * Form\n */\n\nvar form = {};\n\nform.encode = function(data) {\n  return text.encode(querystring.stringify(data));\n};\n\nform.decode = function(data) {\n  return querystring.parse(text.decode(data));\n};\n\n/**\n * Module exports.\n */\n\nexports.json = json;\nexports.form = form;\nexports.text = text;\n","'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar codecs = require('./codecs');\n\n/**\n * Constants\n */\n\nexports.CHARSET = 'utf-8';\n\nexports.ENCODERS = {\n  'application/json': codecs.json.encode,\n  'application/x-www-form-urlencoded': codecs.form.encode,\n  'text/plain': codecs.text.encode,\n};\n\nexports.DECODERS = {\n  'application/json': codecs.json.decode,\n  'application/x-www-form-urlencoded': codecs.form.decode,\n  'text/html': codecs.text.decode,\n  'text/json': codecs.json.decode,\n  'text/plain': codecs.text.decode,\n};\n\nexports.METHODS = [\n  'options',\n  'get',\n  'head',\n  'post',\n  'put',\n  'delete',\n  'patch',\n];\n\nexports.MIME_ALIAS = {\n  form: 'application/x-www-form-urlencoded',\n  json: 'application/json',\n  qs: 'application/x-www-form-urlencoded',\n  querystring: 'application/x-www-form-urlencoded',\n  text: 'text/plain',\n};\n\nexports.EXCLUDE_CONTENT_LENGTH = [\n  'GET',\n  'HEAD',\n  'OPTIONS',\n];\n\nexports.CLIENT_OPTIONS = [\n  'agent',\n  // tls\n  'ca',\n  'cert',\n  'ciphers',\n  'clientCertEngine',\n  'crl',\n  'dhparam',\n  'ecdhCurve',\n  'honorCipherOrder',\n  'key',\n  'passphrase',\n  'pfx',\n  'rejectUnauthorized',\n  'secureOptions',\n  'secureProtocol',\n  'servername',\n  'sessionIdContext',\n];\n\nexports.REQUEST_OPTIONS = exports.CLIENT_OPTIONS.concat([\n  'method',\n]);\n","/**\n * Errors\n */\n\n'use strict';\n\n/**\n * Create\n */\n\nfunction create(message) {\n  var error = message instanceof Error ?\n    message :\n    new Error(message ? message : undefined);\n\n  error.isPapi = true;\n\n  return error;\n}\n\n/**\n * Codec\n */\n\nfunction codec(message) {\n  var error = create(message);\n\n  error.isCodec = true;\n\n  return error;\n}\n\n/**\n * Response\n */\n\nfunction response(message) {\n  var error = create(message);\n\n  error.isResponse = true;\n\n  return error;\n}\n\n/**\n * Abort\n */\n\nfunction abort(message) {\n  var error = create(message);\n\n  error.isAbort = true;\n\n  return error;\n}\n\n/**\n * Timeout\n */\n\nfunction timeout(message) {\n  var error = create(message);\n\n  error.isTimeout = true;\n\n  return error;\n}\n\n/**\n * Validation\n */\n\nfunction validation(message) {\n  var error = create(message);\n\n  error.isValidation = true;\n\n  return error;\n}\n\n/**\n * Module exports.\n */\n\nexports.Codec = codec;\nexports.Response = response;\nexports.Abort = abort;\nexports.Timeout = timeout;\nexports.Validation = validation;\nexports.create = create;\n","'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Client = require('./client').Client;\nvar codecs = require('./codecs');\nvar shortcuts = require('./shortcuts');\nvar tools = require('./tools');\n\n/**\n * Module exports.\n */\n\nexports.Client = Client;\n\nexports.request = shortcuts.request;\nexports.get = shortcuts.method('GET');\nexports.head = shortcuts.method('HEAD');\nexports.post = shortcuts.method('POST');\nexports.put = shortcuts.method('PUT');\nexports.del = exports['delete'] = shortcuts.method('DELETE');\nexports.patch = shortcuts.method('PATCH');\n\nexports.codecs = codecs;\nexports.tools = tools;\n","'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar url = require('url');\n\nvar Client = require('./client').Client;\nvar errors = require('./errors');\n\n/**\n * Request.\n */\n\nfunction request(opts) {\n  if (typeof opts === 'string') {\n    arguments[0] = opts = { method: 'get', url: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  try {\n    if (!opts.url) {\n      throw errors.Validation('url required');\n    }\n\n    if (typeof opts.url !== 'string') {\n      throw errors.Validation('url must be a string');\n    }\n\n    var baseUrl = url.parse(opts.url);\n\n    opts.path = baseUrl.pathname.replace('%7B', '{').replace('%7D', '}');\n    baseUrl.pathname = '';\n\n    var client = new Client({ baseUrl: baseUrl });\n\n    delete opts.url;\n\n    client._request.apply(client, arguments);\n  } catch (err) {\n    var callback = arguments[arguments.length - 1];\n\n    if (typeof callback !== 'function') {\n      err.message = 'no callback: ' + err.message;\n      throw err;\n    }\n\n    callback(err);\n  }\n}\n\n/**\n * Method.\n */\n\nfunction method(name) {\n  return function(opts) {\n    if (typeof opts === 'string') {\n      arguments[0] = opts = { url: opts };\n    } else {\n      opts = opts || {};\n    }\n\n    opts.method = name;\n\n    request.apply(null, arguments);\n  };\n}\n\n/**\n * Module exports.\n */\n\nexports.method = method;\nexports.request = request;\n","/**\n * Random useful tools.\n */\n\n'use strict';\n\n/**\n * Walk \"standard\" library\n */\n\nfunction walk(obj, name, tree) {\n  switch (arguments.length) {\n    case 1:\n      name = obj.name;\n      tree = { name: name };\n      break;\n    case 2:\n      tree = { name: name };\n      break;\n    case 3:\n      break;\n    default:\n      throw new Error('invalid arguments');\n  }\n\n  Object.keys(obj.prototype).forEach(function(key) {\n    var v = obj.prototype[key];\n\n    if (!key.match(/^[a-z]+/)) return;\n    if (!tree.methods) tree.methods = {};\n\n    tree.methods[key] = {\n      name: key,\n      value: v,\n    };\n\n    var meta = obj.meta || {};\n\n    tree.methods[key].type = meta[key] && meta[key].type || 'callback';\n  });\n\n  Object.keys(obj).forEach(function(key) {\n    var v = obj[key];\n\n    if (!key.match(/^[A-Z]+/)) return;\n    if (!tree.objects) tree.objects = {};\n\n    tree.objects[key] = {\n      name: key,\n      value: v,\n    };\n\n    walk(v, key, tree.objects[key]);\n  });\n\n  return tree;\n}\n\n/**\n * Callback wrapper\n */\n\nfunction fromCallback(fn) {\n  return new Promise(function(resolve, reject) {\n    try {\n      return fn(function(err, data) {\n        if (err) return reject(err);\n        return resolve(data);\n      });\n    } catch (err) {\n      return reject(err);\n    }\n  });\n}\n\n/**\n * Wrap callbacks with promises\n */\n\nfunction promisify(client, wrapper) {\n  if (!client) throw new Error('client required');\n  if (!wrapper) {\n    if (global.Promise) {\n      wrapper = fromCallback;\n    } else {\n      throw new Error('wrapper required');\n    }\n  } else if (typeof wrapper !== 'function') {\n    throw new Error('wrapper must be a function');\n  }\n\n  var patch = function(client, tree) {\n    Object.keys(tree.methods).forEach(function(key) {\n      var method = tree.methods[key];\n      var fn = client[method.name];\n\n      if (method.type === 'callback' && !client[method.name]._wrapCallback) {\n        client[method.name] = function() {\n          // use callback if provided\n          if (typeof arguments[arguments.length - 1] === 'function') {\n            return fn.apply(client, arguments);\n          }\n\n          // otherwise return promise\n          var args = Array.prototype.slice.call(arguments);\n          return wrapper(function(callback) {\n            args.push(callback);\n            return fn.apply(client, args);\n          });\n        };\n        client[method.name]._wrapped = true;\n      }\n    });\n\n    if (tree.objects) {\n      Object.keys(tree.objects).forEach(function(key) {\n        var clientKey = key[0].toLowerCase() + key.slice(1);\n        patch(client[clientKey], tree.objects[key]);\n      });\n    }\n  };\n\n  patch(client, walk(client.constructor));\n}\n\n/**\n * Module exports.\n */\n\nexports.promisify = promisify;\nexports.walk = walk;\n","/**\n * Helper functions\n */\n\n'use strict';\n\n/**\n * Check if object is empty\n */\n\nfunction isEmpty(obj) {\n  if (!obj) return true;\n\n  for (var p in obj) {\n    if (obj.hasOwnProperty(p)) return false;\n  }\n\n  return true;\n}\n\n/**\n * Check stream\n */\n\nfunction isStream(s) {\n  return s !== null &&\n    typeof s === 'object' &&\n    typeof s.pipe === 'function';\n}\n\n/**\n * Check readable stream\n */\n\nfunction isReadableStream(s) {\n  return isStream(s) && s.readable !== false;\n}\n\n/**\n * Check writiable stream\n */\n\nfunction isWritableStream(s) {\n  return isStream(s) && s.writable !== false;\n}\n\n/**\n * Merge in objects\n */\n\nfunction merge() {\n  var data = {};\n\n  if (!arguments.length) return data;\n\n  var args = Array.prototype.slice.call(arguments, 0);\n\n  args.forEach(function(obj) {\n    if (!obj) return;\n\n    Object.keys(obj).forEach(function(key) {\n      data[key] = obj[key];\n    });\n  });\n\n  return data;\n}\n\n/**\n * Merge headers\n */\n\nfunction mergeHeaders() {\n  var data = {};\n\n  if (!arguments.length) return data;\n\n  var args = Array.prototype.slice.call(arguments, 0);\n\n  args.forEach(function(obj) {\n    if (!obj) return;\n\n    Object.keys(obj).forEach(function(key) {\n      data[key.toLowerCase()] = obj[key];\n    });\n  });\n\n  return data;\n}\n\n/**\n * Create a shallow copy of obj composed of the specified properties.\n */\n\nfunction pick(obj) {\n  var args = Array.prototype.slice.call(arguments);\n  args.shift();\n\n  if (args.length === 1 && Array.isArray(args[0])) {\n    args = args[0];\n  }\n\n  var result = {};\n\n  args.forEach(function(name) {\n    if (obj.hasOwnProperty(name)) {\n      result[name] = obj[name];\n    }\n  });\n\n  return result;\n}\n\n/**\n * Module exports.\n */\n\nexports.isEmpty = isEmpty;\nexports.isReadableStream = isReadableStream;\nexports.isWritableStream = isWritableStream;\nexports.merge = merge;\nexports.mergeHeaders = mergeHeaders;\nexports.pick = pick;\n","module.exports = require(\"events\");;","module.exports = require(\"fs\");;","module.exports = require(\"http\");;","module.exports = require(\"https\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","module.exports = require(\"querystring\");;","module.exports = require(\"url\");;","module.exports = require(\"util\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(109);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACnvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACxlfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACphBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChtajppsourceRoot":""}